# A small PlatformIO integration script (autogenerated by cargo-pio) that provides the capability to patch
# user-specified frameworks before the build is triggered
#
# How to use:
# Insert/update the following line in one of platformio.ini's environments:
#     extra_scripts = pre:platformio.patch.py
# Specify a newline-separated list of patches to apply:
#     patches = <pio-framework-directory1>@<patch-file1> \n <pio-framework-directory2>@<patch-file2>...
# ... where <patch-file-1>, <patch-file-2> etc. are expected to be placed in a 'patches/' folder of your project

import os

Import("env")

class Patch:
    def run(self, env):
        for (patch, patch_name, dir) in self.__patches_list(env):
            self.__patch(env, patch, patch_name, dir)

    def __patch(self, env, patch, patch_name, dir):
        patch_flag = os.path.join(dir, f"{patch_name}.applied")

        if not os.path.isfile(patch_flag):
            env.Execute(f"git apply {patch}", chdir = dir)
            self.__touch(patch_flag)

    def __patches_list(self, env):
        patches_dir = os.path.join(env.subst("$PROJECT_DIR"), "patches")

        def get_patch(item):
            dir, patch = item.split("@", 1)

            return (
                os.path.join(patches_dir, patch.strip()),
                patch.strip(),
                env.PioPlatform().get_package_dir(dir.strip()))

        return [get_patch(item) for item in env.GetProjectOption("patches", default = "").split("\n") if len(item.strip()) > 0]

    def __touch(self, path):
        os.open(path, os.O_CREAT | os.O_RDWR)

Patch().run(env)
